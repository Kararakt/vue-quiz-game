import { vue, js, ts, sharp } from './images';

import { QuizCard, QuizItem } from '../models/models';

interface Link {
  id: number;
  title: string;
  to: string;
}

interface Checkbox {
  id: string;
  label: string;
}

export const headerLinks: Link[] = [
  {
    id: 1,
    title: 'Главная',
    to: '/',
  },
];

export const checkboxArray: Checkbox[] = [
  {
    id: 'frontend',
    label: 'Frontend',
  },
  {
    id: 'backend',
    label: 'Backend',
  },
  {
    id: 'common',
    label: 'Общие инструменты',
  },
];

export const quizCard = reactive<QuizCard[]>([
  {
    id: 'vue',
    image: vue,
    title: 'Vue.js',
    type: 'frontend',
  },
  {
    id: 'js',
    image: js,
    title: 'JavaScript',
    type: 'common',
  },
  {
    id: 'ts',
    image: ts,
    title: 'TypeScript',
    type: 'common',
  },
  {
    id: 'sharp',
    image: sharp,
    title: 'C#',
    type: 'backend',
  },
]);

export const quizVue = reactive<QuizItem[]>([
  {
    id: 1,
    question: 'Как создать новый экземпляр Vue?',
    options: ['new Vue()', 'createVueInstance()', 'initVue()', 'startVue()'],
    correctAnswer: 'new Vue()',
  },
  {
    id: 2,
    question: 'Что такое директива v-for и как ее использовать?',
    options: [
      'Она используется для рендеринга списка элементов на основе массива данных',
      'Она используется для условного рендеринга элементов',
      'Она используется для создания вычисляемых свойств',
      'Она используется для обработки событий',
    ],
    correctAnswer:
      'Она используется для рендеринга списка элементов на основе массива данных',
  },
  {
    id: 3,
    question: 'Как передать данные от родительского компонента дочернему?',
    options: ['Через props', 'Через emit', 'Через data', 'Через computed'],
    correctAnswer: 'Через props',
  },
  {
    id: 4,
    question:
      'Что такое вычисляемые свойства (computed properties) в Vue и когда их следует использовать?',
    options: [
      'Они используются для отслеживания изменений данных и автоматического обновления DOM',
      'Они используются для создания методов в экземпляре Vue',
      'Они используются для создания реактивных свойств',
      'Они используются для создания вычисляемых свойств',
    ],
    correctAnswer:
      'Они используются для отслеживания изменений данных и автоматического обновления DOM',
  },
  {
    id: 5,
    question: 'Как обработать событие во Vue?',
    options: [
      'С помощью директивы v-on',
      'С помощью директивы v-bind',
      'С помощью директивы v-model',
      'С помощью директивы v-if',
    ],
    correctAnswer: 'С помощью директивы v-on',
  },
  {
    id: 6,
    question: 'Что такое условный рендеринг в Vue и как его использовать?',
    options: [
      'Условный рендеринг используется для отображения элементов в зависимости от условия',
      'Условный рендеринг используется для создания вычисляемых свойств',
      'Условный рендеринг используется для обработки событий',
      'Условный рендеринг используется для создания реактивных свойств',
    ],
    correctAnswer:
      'Условный рендеринг используется для отображения элементов в зависимости от условия',
  },
  {
    id: 7,
    question:
      'Что такое жизненный цикл компонента во Vue и какие этапы он включает?',
    options: [
      'Это процесс создания и удаления компонентов в приложении Vue',
      'Это процесс обновления данных в компонентах Vue',
      'Это процесс управления состоянием компонентов во Vue',
      'Это процесс создания, обновления и удаления компонентов во Vue',
    ],
    correctAnswer:
      'Это процесс создания, обновления и удаления компонентов во Vue',
  },
  {
    id: 8,
    question: 'Что такое директива v-model и как ее использовать?',
    options: [
      'Она используется для условного рендеринга элементов',
      'Она используется для создания вычисляемых свойств',
      'Она используется для обработки событий',
      'Она используется для создания двусторонней привязки данных',
    ],
    correctAnswer: 'Она используется для создания двусторонней привязки данных',
  },
  {
    id: 9,
    question: 'Что такое директива v-if и в чем ее отличие от v-show?',
    options: [
      'v-if используется для условного рендеринга элементов, в то время как v-show просто переключает видимость элемента',
      'v-if и v-show выполняют одинаковые функции',
      'v-show используется для условного рендеринга элементов, в то время как v-if просто переключает видимость элемента',
      'v-if и v-show не имеют различий',
    ],
    correctAnswer:
      'v-if используется для условного рендеринга элементов, в то время как v-show просто переключает видимость элемента',
  },
  {
    id: 10,
    question: 'Что такое Vue Router и как его использовать?',
    options: [
      'Vue Router - это официальная библиотека маршрутизации для Vue.js, позволяющая создавать одностраничные приложения',
      'Vue Router - это инструмент для управления состоянием приложения во Vue.js',
      'Vue Router - это библиотека для создания анимаций во Vue.js',
      'Vue Router - это компонент для создания маршрутов во Vue.js',
    ],
    correctAnswer:
      'Vue Router - это официальная библиотека маршрутизации для Vue.js, позволяющая создавать одностраничные приложения',
  },
  {
    id: 11,
    question:
      'Что такое директива v-bind и в каких случаях ее следует использовать?',
    options: [
      'Она используется для условного рендеринга элементов',
      'Она используется для привязки атрибутов к выражениям',
      'Она используется для создания вычисляемых свойств',
      'Она используется для обработки событий',
    ],
    correctAnswer: 'Она используется для привязки атрибутов к выражениям',
  },
  {
    id: 12,
    question: 'Что такое Vuex и для чего он используется в Vue.js?',
    options: [
      'Vuex - это состояние управления состоянием для Vue.js',
      'Vuex - это система событий для Vue.js',
      'Vuex - это библиотека маршрутизации для Vue.js',
      'Vuex - это инструмент для тестирования Vue.js',
    ],
    correctAnswer: 'Vuex - это состояние управления состоянием для Vue.js',
  },
  {
    id: 13,
    question: 'Как в Vue.js задать привязку стилей к элементам?',
    options: [
      'С помощью директивы v-bind',
      'С помощью директивы v-on',
      'С помощью директивы v-if',
      'С помощью директивы v-model',
    ],
    correctAnswer: 'С помощью директивы v-bind',
  },
  {
    id: 14,
    question: 'Что такое директива v-else и как ее использовать?',
    options: [
      'Она используется в сочетании с v-if для условного рендеринга',
      'Она используется для обработки событий',
      'Она используется для привязки данных',
      'Она используется для создания вычисляемых свойств',
    ],
    correctAnswer:
      'Она используется в сочетании с v-if для условного рендеринга',
  },
  {
    id: 15,
    question: 'Что такое слоты (slots) в Vue.js?',
    options: [
      'Слоты позволяют передавать контент из родительского компонента в дочерний',
      'Слоты используются для маршрутизации',
      'Слоты используются для обработки событий',
      'Слоты позволяют создавать динамические свойства',
    ],
    correctAnswer:
      'Слоты позволяют передавать контент из родительского компонента в дочерний',
  },
  {
    id: 16,
    question: 'Что такое composables в Vue.js?',
    options: [
      'Composables позволяют повторно использовать логику между компонентами',
      'Composables позволяют создавать стили для компонентов',
      'Composables позволяют определять методы обработки событий',
      'Composables используются для условного рендеринга',
    ],
    correctAnswer:
      'Composables позволяют повторно использовать логику между компонентами',
  },
  {
    id: 17,
    question: 'Как в Vue.js использовать обработку событий между компонентами?',
    options: [
      'С помощью $emit',
      'С помощью директивы v-model',
      'С помощью computed properties',
      'С помощью Vuex',
    ],
    correctAnswer: 'С помощью $emit',
  },
  {
    id: 18,
    question:
      'Что такое динамические компоненты в Vue.js и как их использовать?',
    options: [
      'Динамические компоненты позволяют менять компоненты на лету',
      'Динамические компоненты позволяют условно рендерить элементы',
      'Динамические компоненты позволяют управлять маршрутизацией',
      'Динамические компоненты позволяют обрабатывать события',
    ],
    correctAnswer:
      'Динамические компоненты позволяют менять компоненты на лету',
  },
  {
    id: 19,
    question: 'Что такое Vue CLI и для чего он используется?',
    options: [
      'Vue CLI - это инструмент для создания проектов на Vue.js',
      'Vue CLI - это инструмент для тестирования Vue.js',
      'Vue CLI - это библиотека маршрутизации для Vue.js',
      'Vue CLI - это инструмент для управления состоянием в Vue.js',
    ],
    correctAnswer: 'Vue CLI - это инструмент для создания проектов на Vue.js',
  },
  {
    id: 20,
    question: 'Что такое Scoped CSS в Vue.js и как его использовать?',
    options: [
      'Scoped CSS позволяет ограничивать стили в рамках одного компонента',
      'Scoped CSS позволяет создавать глобальные стили',
      'Scoped CSS позволяет использовать переменные CSS',
      'Scoped CSS позволяет условно применять стили',
    ],
    correctAnswer:
      'Scoped CSS позволяет ограничивать стили в рамках одного компонента',
  },
]);

export const quizJS = reactive<QuizItem[]>([
  {
    id: 1,
    question: 'Как объявить переменную в JavaScript?',
    options: ['var', 'let', 'const', 'все перечисленные'],
    correctAnswer: 'все перечисленные',
  },
  {
    id: 2,
    question: 'Что возвращает typeof null в JavaScript?',
    options: ['"object"', '"null"', '"undefined"', '"boolean"'],
    correctAnswer: '"object"',
  },
  {
    id: 3,
    question: 'Как объявить функцию в JavaScript?',
    options: [
      'function myFunc()',
      'const myFunc = () => {}',
      'function() {}',
      'все перечисленные',
    ],
    correctAnswer: 'все перечисленные',
  },
  {
    id: 4,
    question: 'Что такое замыкание в JavaScript?',
    options: [
      'Способ доступа к переменным из внешней функции в замкнутом контексте',
      'Способ изоляции переменных',
      'Способ объявления переменной',
      'Способ оптимизации кода',
    ],
    correctAnswer:
      'Способ доступа к переменным из внешней функции в замкнутом контексте',
  },
  {
    id: 5,
    question: 'Что делает метод Array.prototype.map()?',
    options: [
      'Создает новый массив, применяя функцию ко всем элементам существующего массива',
      'Создает новый массив, удаляя элементы, которые не соответствуют условию',
      'Создает новый массив, объединяя элементы по определенному правилу',
      'Создает новый массив, изменяя порядок элементов',
    ],
    correctAnswer:
      'Создает новый массив, применяя функцию ко всем элементам существующего массива',
  },
  {
    id: 6,
    question: 'Как создать объект в JavaScript?',
    options: ['{}', 'Object.create()', 'new Object()', 'все перечисленные'],
    correctAnswer: 'все перечисленные',
  },
  {
    id: 7,
    question: 'Что такое Promise в JavaScript?',
    options: [
      'Объект, представляющий результат асинхронной операции',
      'Функция, возвращающая результат',
      'Асинхронный обработчик событий',
      'Способ хранения данных',
    ],
    correctAnswer: 'Объект, представляющий результат асинхронной операции',
  },
  {
    id: 8,
    question: 'Что делает оператор spread (...) в JavaScript?',
    options: [
      'Расширяет массив или объект',
      'Объединяет массивы или объекты',
      'Клонирует массивы или объекты',
      'Умножает элементы массива',
    ],
    correctAnswer: 'Расширяет массив или объект',
  },
  {
    id: 9,
    question: 'Что такое callback-функция?',
    options: [
      'Функция, переданная в другую функцию в качестве аргумента',
      'Функция, которая вызывается несколько раз',
      'Функция, возвращающая другой результат',
      'Функция, которая вызывает другую функцию',
    ],
    correctAnswer: 'Функция, переданная в другую функцию в качестве аргумента',
  },
  {
    id: 10,
    question: 'Что такое hoisting в JavaScript?',
    options: [
      'Механизм перемещения деклараций переменных и функций в начало контекста',
      'Механизм расширения массивов',
      'Механизм динамического изменения типа данных',
      'Механизм асинхронного исполнения кода',
    ],
    correctAnswer:
      'Механизм перемещения деклараций переменных и функций в начало контекста',
  },
  {
    id: 11,
    question: 'Как получить длину массива в JavaScript?',
    options: ['arr.length', 'arr.size', 'arr.count', 'arr.getLength()'],
    correctAnswer: 'arr.length',
  },
  {
    id: 12,
    question:
      'Что возвращает оператор typeof для переменной, объявленной, но не инициализированной?',
    options: ['"undefined"', '"null"', '"object"', '"number"'],
    correctAnswer: '"undefined"',
  },
  {
    id: 13,
    question:
      'Что происходит при попытке использовать const для неизменяемых данных?',
    options: [
      'Возникает ошибка, если данные пытаются изменить',
      'Не возникает никаких ошибок',
      'Переменная создается с нулевым значением',
      'Происходит автоматическое преобразование в let',
    ],
    correctAnswer: 'Возникает ошибка, если данные пытаются изменить',
  },
  {
    id: 14,
    question: 'Что означает IIFE в JavaScript?',
    options: [
      'Immediately Invoked Function Expression',
      'Internal Instance Function Expression',
      'Immediate Initialization of Function Events',
      'Instance Initialization of Functions and Expressions',
    ],
    correctAnswer: 'Immediately Invoked Function Expression',
  },
  {
    id: 15,
    question: 'Что такое NaN в JavaScript?',
    options: [
      'Not a Number',
      'Null and Nullified',
      'New and Normalized',
      'None Above Normal',
    ],
    correctAnswer: 'Not a Number',
  },
  {
    id: 16,
    question: 'Как проверить, что значение является массивом?',
    options: [
      'Array.isArray(value)',
      'typeof value === "array"',
      'value instanceof Array',
      'оба первые',
    ],
    correctAnswer: 'оба первые',
  },
  {
    id: 17,
    question: 'Что такое `setTimeout` в JavaScript?',
    options: [
      'Функция, которая вызывает другую функцию через заданный период времени',
      'Функция, которая вызывает другую функцию при выполнении условия',
      'Асинхронный обработчик событий',
      'Объект, представляющий отложенный вызов',
    ],
    correctAnswer:
      'Функция, которая вызывает другую функцию через заданный период времени',
  },
  {
    id: 18,
    question: 'Что такое стрелочная функция в JavaScript?',
    options: [
      'Сокращенный синтаксис для функции',
      'Функция, вызывающая другую функцию',
      'Объект, представляющий результат асинхронной операции',
      'Способ декларации переменных',
    ],
    correctAnswer: 'Сокращенный синтаксис для функции',
  },
  {
    id: 19,
    question: 'Как узнать, является ли переменная NaN?',
    options: [
      'isNaN(variable)',
      'typeof variable === "NaN"',
      'variable instanceof NaN',
      'variable === NaN',
    ],
    correctAnswer: 'isNaN(variable)',
  },
  {
    id: 20,
    question: 'Что означает `null` в JavaScript?',
    options: ['Отсутствие значения', 'Ноль', 'undefined', 'Ошибка'],
    correctAnswer: 'Отсутствие значения',
  },
]);

export const quizTS = reactive<QuizItem[]>([
  {
    id: 1,
    question: 'Как объявить переменную с типом в TypeScript?',
    options: ['let x: number', 'let x = number', 'let x::number', 'let x = 1'],
    correctAnswer: 'let x: number',
  },
  {
    id: 2,
    question: 'Что делает оператор "!" в TypeScript?',
    options: [
      'Отключает проверку null и undefined',
      'Является оператором отрицания',
      'Используется для неявного приведения типов',
      'Обозначает дженерик',
    ],
    correctAnswer: 'Отключает проверку null и undefined',
  },
  {
    id: 3,
    question: 'Как объявить интерфейс в TypeScript?',
    options: [
      'interface MyInterface { }',
      'class MyInterface { }',
      'type MyInterface = { }',
      'enum MyInterface { }',
    ],
    correctAnswer: 'interface MyInterface { }',
  },
  {
    id: 4,
    question: 'Что такое "union type" в TypeScript?',
    options: [
      'Тип, который может быть одним из нескольких типов',
      'Тип, который объединяет несколько типов',
      'Тип, который принимает объект или массив',
      'Тип, который наследует несколько типов',
    ],
    correctAnswer: 'Тип, который может быть одним из нескольких типов',
  },
  {
    id: 5,
    question: 'Как объявить класс в TypeScript?',
    options: [
      'class MyClass { }',
      'interface MyClass { }',
      'type MyClass = { }',
      'const MyClass = { }',
    ],
    correctAnswer: 'class MyClass { }',
  },
  {
    id: 6,
    question: 'Что такое дженерики (generics) в TypeScript?',
    options: [
      'Способ создания типов с параметрами',
      'Способ определения интерфейсов',
      'Способ объявления переменных с различными типами',
      'Способ реализации наследования',
    ],
    correctAnswer: 'Способ создания типов с параметрами',
  },
  {
    id: 7,
    question: 'Какую роль играет тип "any" в TypeScript?',
    options: [
      'Позволяет переменной иметь любой тип',
      'Используется для определенных типов данных',
      'Представляет отсутствие типа',
      'Определяет неопределенные значения',
    ],
    correctAnswer: 'Позволяет переменной иметь любой тип',
  },
  {
    id: 8,
    question: 'Как использовать декораторы в TypeScript?',
    options: [
      'Для добавления функциональности классам или методам',
      'Для определения типов переменных',
      'Для реализации наследования',
      'Для обработки событий',
    ],
    correctAnswer: 'Для добавления функциональности классам или методам',
  },
  {
    id: 9,
    question: 'Как объявить константу в TypeScript с определенным типом?',
    options: [
      'const x: number = 1',
      'let x: number = 1',
      'var x = 1',
      'const x::number = 1',
    ],
    correctAnswer: 'const x: number = 1',
  },
  {
    id: 10,
    question: 'Какой из следующих типов является "примитивным" в TypeScript?',
    options: ['string', 'array', 'object', 'enum'],
    correctAnswer: 'string',
  },
  {
    id: 11,
    question: 'Что такое enum в TypeScript?',
    options: [
      'Перечисление возможных значений переменной',
      'Объект с константными значениями',
      'Тип, который может быть одним из нескольких типов',
      'Тип, который определяет набор свойств',
    ],
    correctAnswer: 'Перечисление возможных значений переменной',
  },
  {
    id: 12,
    question:
      'Какой из операторов используется для "сужения" типа в TypeScript?',
    options: ['as', 'is', 'typeof', 'instanceof'],
    correctAnswer: 'as',
  },
  {
    id: 13,
    question: 'Что такое "readonly" свойство в TypeScript?',
    options: [
      'Свойство, которое нельзя изменить после инициализации',
      'Свойство, которое можно читать, но нельзя изменять',
      'Свойство, которое наследуется',
      'Свойство, которое переопределяется',
    ],
    correctAnswer: 'Свойство, которое нельзя изменить после инициализации',
  },
  {
    id: 14,
    question:
      'Как создать переменную, которая может быть либо числом, либо строкой?',
    options: [
      'let x: string | number',
      'let x: number',
      'let x: any',
      'let x: object',
    ],
    correctAnswer: 'let x: string | number',
  },
  {
    id: 15,
    question:
      'Как объявить переменную, которая может быть null или определенным типом?',
    options: [
      'let x: number | null',
      'let x: undefined',
      'let x: number',
      'let x: null',
    ],
    correctAnswer: 'let x: number | null',
  },
  {
    id: 16,
    question: 'Что такое "abstract" класс в TypeScript?',
    options: [
      'Класс, который нельзя напрямую создать, но можно наследовать',
      'Класс, который является основой для других классов',
      'Класс, который не содержит методов',
      'Класс, который определяет интерфейс',
    ],
    correctAnswer:
      'Класс, который нельзя напрямую создать, но можно наследовать',
  },
  {
    id: 17,
    question: 'Что означает "type assertion" в TypeScript?',
    options: [
      'Способ указания типа переменной',
      'Способ преобразования типов',
      'Способ переопределения типов',
      'Способ определения типов переменных',
    ],
    correctAnswer: 'Способ указания типа переменной',
  },
  {
    id: 18,
    question: 'Какой оператор используется для "нестрогого" приведения типов?',
    options: ['==', '===', '!=', '!=='],
    correctAnswer: '==',
  },
  {
    id: 19,
    question: 'Что такое "decorator" в TypeScript?',
    options: [
      'Способ добавления функциональности к классам, методам или свойствам',
      'Способ определения классов',
      'Способ наследования классов',
      'Способ создания объектов',
    ],
    correctAnswer:
      'Способ добавления функциональности к классам, методам или свойствам',
  },
  {
    id: 20,
    question: 'Какое назначение у "keyof" в TypeScript?',
    options: [
      'Получает ключи интерфейса или объекта',
      'Возвращает тип переменной',
      'Возвращает значение переменной',
      'Проверяет тип переменной',
    ],
    correctAnswer: 'Получает ключи интерфейса или объекта',
  },
]);

export const quizSharp = reactive<QuizItem[]>([
  {
    id: 1,
    question: 'Как объявить переменную в C#?',
    options: ['int x;', 'let x;', 'var x = 0;', 'int x = 0;'],
    correctAnswer: 'int x = 0;',
  },
  {
    id: 2,
    question: 'Что такое boxing и unboxing в C#?',
    options: [
      'Преобразование значимых типов в ссылочные и обратно',
      'Способ выделения памяти для переменной',
      'Способ обработки ошибок',
      'Способ контроля жизненного цикла объектов',
    ],
    correctAnswer: 'Преобразование значимых типов в ссылочные и обратно',
  },
  {
    id: 3,
    question: 'Как объявить класс в C#?',
    options: [
      'class MyClass',
      'struct MyClass',
      'interface MyClass',
      'enum MyClass',
    ],
    correctAnswer: 'class MyClass',
  },
  {
    id: 4,
    question: 'Что такое делегаты в C#?',
    options: [
      'Тип, представляющий ссылку на метод',
      'Тип данных, который может содержать несколько значений',
      'Тип, представляющий события',
      'Способ передачи аргументов в методы',
    ],
    correctAnswer: 'Тип, представляющий ссылку на метод',
  },
  {
    id: 5,
    question: 'Как создать массив в C#?',
    options: [
      'int[] array = new int[10];',
      'let array = [10];',
      'Array array = new Array(10);',
      'int array[10];',
    ],
    correctAnswer: 'int[] array = new int[10];',
  },
  {
    id: 6,
    question: 'Что такое LINQ в C#?',
    options: [
      'Язык запросов к коллекциям и источникам данных',
      'Инструмент для асинхронной обработки данных',
      'Инструмент для работы с массивами',
      'Инструмент для управления классами и объектами',
    ],
    correctAnswer: 'Язык запросов к коллекциям и источникам данных',
  },
  {
    id: 7,
    question: 'Какое ключевое слово используется для наследования в C#?',
    options: ['base', 'extends', 'inherits', 'super'],
    correctAnswer: 'base',
  },
  {
    id: 8,
    question: 'Что такое интерфейсы в C#?',
    options: [
      'Контракты, которые определяют набор методов и свойств',
      'Способ определения классов',
      'Способ организации кода',
      'Способ управления наследованием',
    ],
    correctAnswer: 'Контракты, которые определяют набор методов и свойств',
  },
  {
    id: 9,
    question: 'Как создать анонимный метод в C#?',
    options: [
      'delegate() { ... }',
      'func() { ... }',
      'anonymous() { ... }',
      'void() { ... }',
    ],
    correctAnswer: 'delegate() { ... }',
  },
  {
    id: 10,
    question: 'Что такое async/await в C#?',
    options: [
      'Механизм для работы с асинхронными операциями',
      'Способ управления памятью',
      'Способ управления классами',
      'Механизм синхронного выполнения кода',
    ],
    correctAnswer: 'Механизм для работы с асинхронными операциями',
  },
  {
    id: 11,
    question: 'Что означает ключевое слово "const" в C#?',
    options: [
      'Переменная, значение которой нельзя изменить после инициализации',
      'Переменная, которая может быть передана по значению',
      'Переменная, которая существует только в пределах метода',
      'Переменная, которая может быть наследована',
    ],
    correctAnswer:
      'Переменная, значение которой нельзя изменить после инициализации',
  },
  {
    id: 12,
    question: 'Что такое событие (event) в C#?',
    options: [
      'Способ подписки на действия или изменения',
      'Способ определения методов',
      'Способ объявления переменных',
      'Способ определения классов',
    ],
    correctAnswer: 'Способ подписки на действия или изменения',
  },
  {
    id: 13,
    question: 'Что такое "partial" класс в C#?',
    options: [
      'Класс, который может быть разделен на несколько файлов',
      'Класс, который не полностью определен',
      'Класс, который наследуется от другого класса',
      'Класс, который может содержать только частичные данные',
    ],
    correctAnswer: 'Класс, который может быть разделен на несколько файлов',
  },
  {
    id: 14,
    question: 'Какое назначение у ключевого слова "this" в C#?',
    options: [
      'Указывает на текущий экземпляр класса',
      'Указывает на родительский класс',
      'Указывает на глобальный контекст',
      'Указывает на статический класс',
    ],
    correctAnswer: 'Указывает на текущий экземпляр класса',
  },
  {
    id: 15,
    question: 'Что означает "protected" в C#?',
    options: [
      'Доступ к членам класса ограничен наследниками',
      'Доступ к членам класса ограничен только внутри класса',
      'Доступ к членам класса полностью запрещен',
      'Доступ к членам класса открыт всем',
    ],
    correctAnswer: 'Доступ к членам класса ограничен наследниками',
  },
  {
    id: 16,
    question: 'Что такое enum в C#?',
    options: [
      'Перечисление возможных значений',
      'Тип данных, который представляет массив',
      'Тип данных, который объединяет несколько значений',
      'Тип данных, который наследуется',
    ],
    correctAnswer: 'Перечисление возможных значений',
  },
  {
    id: 17,
    question: 'Как объявить метод в C#?',
    options: [
      'public void MyMethod() { ... }',
      'let MyMethod = () => {}',
      'function MyMethod() { ... }',
      'const MyMethod = { ... }',
    ],
    correctAnswer: 'public void MyMethod() { ... }',
  },
  {
    id: 18,
    question: 'Что такое статический метод в C#?',
    options: [
      'Метод, который принадлежит классу, а не экземпляру класса',
      'Метод, который принадлежит экземпляру класса',
      'Метод, который наследуется от родительского класса',
      'Метод, который нельзя изменить',
    ],
    correctAnswer: 'Метод, который принадлежит классу, а не экземпляру класса',
  },
  {
    id: 19,
    question: 'Как узнать, реализует ли объект определенный интерфейс в C#?',
    options: [
      'obj is IMyInterface',
      'obj implements IMyInterface',
      'obj instanceof IMyInterface',
      'obj typeof IMyInterface',
    ],
    correctAnswer: 'obj is IMyInterface',
  },
  {
    id: 20,
    question: 'Что такое замыкание в C#?',
    options: [
      'Способ доступа к переменным внешней функции из замкнутого контекста',
      'Способ организации методов в классе',
      'Способ создания методов',
      'Способ управления экземпляром класса',
    ],
    correctAnswer:
      'Способ доступа к переменным внешней функции из замкнутого контекста',
  },
]);
